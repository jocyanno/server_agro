import { FastifyReply, FastifyRequest } from 'fastify';
import { cemadenService } from '../services/cemaden.service';
import { ModeloPrevisaoChuva } from '../services/previsao-chuva.service';

export class CemadenController {
  async import(request: FastifyRequest, reply: FastifyReply) {
    try {
      const files = request.files();

      if (!files) {
        return reply.status(400).send({
          error: 'Nenhum arquivo foi enviado',
        });
      }

      const result = await cemadenService.importData(files);

      console.log('Resultado da importa칞칚o CEMADEN:', result);

      return reply.status(200).send({
        success: true,
        message: 'Importa칞칚o conclu칤da com sucesso.',
      });
    } catch (error) {
      console.error('Erro no controller import CEMADEN:', error);

      return reply.status(500).send({
        error: 'Erro interno do servidor',
      });
    }
  }

  async getChuvasAcumuladas(request: FastifyRequest, reply: FastifyReply) {
    try {
      const { codEstacao } = request.params as { codEstacao: string };
      const { dataInicio, dataFim } = request.query as {
        dataInicio?: string;
        dataFim?: string;
      };

      if (!codEstacao) {
        return reply.status(400).send({
          error: 'C칩digo da esta칞칚o 칠 obrigat칩rio',
        });
      }

      const data = await cemadenService.getChuvasAcumuladas(
        codEstacao,
        dataInicio,
        dataFim,
      );

      return reply.status(200).send({
        success: true,
        data,
        total: data.length,
      });
    } catch (error) {
      console.error('Erro no controller getChuvasAcumuladas CEMADEN:', error);

      return reply.status(500).send({
        error: 'Erro interno do servidor',
      });
    }
  }

  async cleanCorruptedData(request: FastifyRequest, reply: FastifyReply) {
    try {
      const result = await cemadenService.cleanCorruptedData();

      return reply.status(200).send({
        success: true,
        message: result,
      });
    } catch (error) {
      console.error('Erro no controller cleanCorruptedData CEMADEN:', error);

      return reply.status(500).send({
        error: 'Erro interno do servidor',
      });
    }
  }

  async getPrevisaoChuva(request: FastifyRequest, reply: FastifyReply) {
    try {
      const { codEstacao } = request.params as { codEstacao: string };

      if (!codEstacao) {
        return reply.status(400).send({
          error: 'C칩digo da esta칞칚o 칠 obrigat칩rio',
        });
      }

      console.log(`Gerando previs칚o de chuva para esta칞칚o: ${codEstacao}`);

      // Buscar TODA a base de dados hist칩ricos dispon칤vel no banco
      console.log('游늵 Buscando TODA a base de dados hist칩ricos dispon칤vel...');
      const dadosHistoricos = await cemadenService.getChuvasAcumuladas(
        codEstacao,
        // SEM par칙metros de data - usa toda a base hist칩rica dispon칤vel
      );

      if (!dadosHistoricos || dadosHistoricos.length === 0) {
        return reply.status(404).send({
          error: 'Dados hist칩ricos n칚o encontrados para esta esta칞칚o',
        });
      }

      // Gerar previs칚o usando o modelo avan칞ado
      const previsao = ModeloPrevisaoChuva.calcularPrevisao(dadosHistoricos);

      console.log(
        `Previs칚o gerada: acur치cia ${previsao.acuracia}%, confian칞a ${previsao.confianca}%`,
      );

      return reply.status(200).send({
        success: true,
        data: previsao,
        metadata: {
          estacao: codEstacao,
          timestamp: new Date().toISOString(),
          versaoModelo: '2.0.0',
          amostrasUtilizadas: dadosHistoricos.length,
        },
      });
    } catch (error) {
      console.error('Erro ao gerar previs칚o de chuva:', error);
      return reply.status(500).send({
        error: 'Erro interno do servidor ao gerar previs칚o',
        details: error instanceof Error ? error.message : 'Erro desconhecido',
      });
    }
  }
}
